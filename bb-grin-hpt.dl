#include "old/complex.dl"
// #include "old/simple.dl"

// heap points-to analysis for grin with basic blocks
/*
  OLD GRIN PROBLEMS:
    bind pattern naming
      WORKAROUND: '(CInt r)' identifies the 'pure v3' instruction

    case alternative nameing / Basic Block naming
      WORKAROUND: Basic Block name can be constructed e.g. case identifier 'h' + alternative identifier '(CInt x)' so the Basic Block's name would be 'h:(CInt x)'

  IDEALLY:
    case alternatives would call Basic Blocks
    @-pattern for bind patterns and case patterns

  APPROACH:
    define a new AST for the improved GRIN with conversion function to/from the current GRIN AST
*/

.type BasicBlock
.type Function
.type Variable
.type Tag
.type Literal
.type LiteralType
.type CodeName = BasicBlock | Function

// variable
// example: result <- pure value
.decl Move(result:Variable, value:Variable)

// literal value
// example: result <- pure 1
//.decl LitAssign(result:Variable, l:Literal, lt:LiteralType)
/*
  literals can be modeled with nodes where node tag describes the literal type and node argument stores the literal value
*/


// node value
// example: result_node <- pure (Ctag item0 item1)
.decl Node(result_node:Variable, t:Tag)
.decl NodeArgument(result_node:Variable, i:number, item:Variable)
// store/fetch/update
// example: result <- fetch value
.decl Fetch(result:Variable, value:Variable)
.decl Store(result:Variable, value:Variable)
// example: result <- update target value
.decl Update(result:Variable, target:Variable, value:Variable)
// app a.k.a. call
// example: call_result <- f value0 value1
.decl Call(call_result:Variable, f:Function)
.decl CallArgument(call_result:Variable, i:number, value:Variable)
// bind pattern
// example: node@(Ctag param0 param1) <- pure input_value
.decl NodePattern(node:Variable, t:Tag, input_value:Variable)
.decl NodeParameter(node:Variable, i:number, parameter:Variable)
// function
// example: f param0 param1 = ...
.decl FunctionParameter(f:Function, i:number, parameter:Variable)
// case + alt
// example:
//  case_result <- case scrut of
//    alt_value@(Ctag param0 param1) -> basic_block_name arg0 arg1
.decl Case(case_result:Variable, scrutinee:Variable)
.decl Alt(case_result:Variable, alt_value:Variable, t:Tag, b:BasicBlock)
.decl AltParameter(alt_value:Variable, i:number, parameter:Variable)
.decl AltArgument(alt_value:Variable, i:number, value:Variable)
// basic block
// example: bb param0 param1 = ...
.decl BlockParameter(b:BasicBlock, i:number, parameter:Variable)
// pure a.k.a. return value
// example: pure value
.decl ReturnValue(n:CodeName, value:Variable)

// instruction ordering
.decl FirstInst(n:CodeName, result:Variable)
.decl NextInst(prev:Variable, next:Variable)

// Reachability
.decl ReachableCode(n:CodeName)
.decl CodeNameInst(n:CodeName, v:Variable)

CodeNameInst(n, v) :-
  FirstInst(n, v).
CodeNameInst(n, v) :-
  CodeNameInst(n, v0),
  NextInst(v0, v).

.output CodeNameInst(delimiter=",")

ReachableCode("grinMain").
ReachableCode(n) :-
  ReachableCode(n0),
  CodeNameInst(n0, v),
  Call(v, n).

.output ReachableCode(delimiter=",")

.decl ReachableInst(v:Variable)

ReachableInst(v) :-
  ReachableCode(n),
  CodeNameInst(n, v).

// HPT
/*
Record(obj, ctx) = hctx
VarPointsTo(var, ctx, obj, hctx) <-
  Alloc(var, obj, method),
  Reachable(method, ctx).
*/
.decl VarPointsTo(v:Variable, target:Variable)
.output VarPointsTo(delimiter=",")

VarPointsTo(v,t) :-
  Store(v, t),
  ReachableInst(v).

VarPointsTo(v,t) :-
  VarPointsTo(v0, t),
  Move(v, v0),
  ReachableInst(v).

VarPointsTo(v,t) :-
  Update(r, v, t),
  ReachableInst(r).

VarPointsTo(v,t) :-
  FunctionParameter(_, i, v),
  CallArgument(r, i, v0),
  VarPointsTo(v0, t),
  ReachableInst(r).

///////////////

//.decl Move(result:Variable, value:Variable)
//.decl LitAssign(result:Variable, l:Literal, lt:LiteralType)
//.decl Node(result_node:Variable, t:Tag)
//.decl NodeArgument(result_node:Variable, i:number, item:Variable)

//  .decl Fetch(result:Variable, value:Variable)
//  .decl Store(result:Variable, value:Variable)
//  .decl Update(result:Variable, target:Variable, value:Variable)

//.decl Call(call_result:Variable, f:Function)
//.decl CallArgument(call_result:Variable, i:number, value:Variable)
//.decl NodePattern(node:Variable, t:Tag, input_value:Variable)
//.decl NodeParameter(node:Variable, i:number, parameter:Variable)
//.decl FunctionParameter(f:Function, i:number, parameter:Variable)
//.decl Case(case_result:Variable, scrutinee:Variable)
//.decl Alt(case_result:Variable, alt_value:Variable, t:Tag, b:BasicBlock)
//.decl AltParameter(alt_value:Variable, i:number, parameter:Variable)
//.decl AltArgument(alt_value:Variable, i:number, value:Variable)
//.decl BlockParameter(b:BasicBlock, i:number, parameter:Variable)
//.decl ReturnValue(n:CodeName, value:Variable)

//.decl BlockCall(call_result:Variable, b:BasicBlock) // a.k.a. tail call, jump

///////////////

// Origin Computation alias Created-By

.decl Origin(v:Variable, value:Variable)
.output Origin(delimiter=",")


// value origin: lit and node
//Origin(v, l) :-
//  LitAssign(l, _, _),
//  Move(v, l).

Origin(v, n) :-
  Node(n, _),
  Move(v, n).

// fun param
Origin(p, val) :-
  CallArgument(r, i, a),
  Call(r, f),
  FunctionParameter(f, i, p),
  Origin(a, val).

// fun return
Origin(r, val) :-
  Call(r, f),
  ReturnValue(f, v),
  Origin(v, val).

// bind pattern
Origin(v, val) :-
  NodePattern(v, tag, n),
  Origin(n, val),
  Node(val, tag).

Origin(param, argval) :-
  NodePattern(v, tag, n),
  NodeParameter(v, i, param),
  Origin(n, nval),
  Node(nval, tag),
  NodeArgument(nval, i, arg),
  Origin(arg, argval).


// case - alt

Origin(alt_val, scrut_val) :-
  Case(case_result, scrut),
  Alt(case_result, alt_val, tag, bb),
  Origin(scrut, scrut_val),
  Node(scrut_val, tag).

// alt params
Origin(p, val) :-
  Alt(_, alt, tag, bb),
  AltParameter(alt, i, p),
  Origin(alt, node),
  Node(node, tag),
  NodeArgument(node, i, narg),
  Origin(narg, val).

// alt bb args
Origin(p, val) :-
  Alt(_, alt, tag, bb),
  AltArgument(alt, i, arg),
  BlockParameter(bb, i, p),
  Origin(arg, val).

// alt result
Origin(case_result, val) :-
  Case(case_result, _),
  Alt(case_result, _, _, bb),
  ReturnValue(bb, v),
  Origin(v, val).

// util: value origins/sources
Origin(n, n) :-
  Node(n, _).

Origin(v, v) :-
  Store(v, _).

// HPT: store
Origin(v, val) :-
  Fetch(v, v0),
  Origin(v0, val0),
  Store(val0, sv),
  Origin(sv, val).

// HPT: update
Origin(v, val) :-
  Fetch(v, v0),
  Origin(v0, val0),
  Update(_, val0, sv),
  Origin(sv, val).

/*
  TODO:
    case/alt/default pattern
    context sensitivity
*/

/*
grinMain =
  c0 <- pure 1
  c1 <- pure 12

  v1 <- pure (CInt c0)
  t1 <- store v1
  v2 <- pure (CInt c1)
  t2 <- store v2
  v3 <- eval t2
  p1@(CInt r) <- pure v3
  v4 <-_prim_int_print r
  pure v4

eval q = v <- fetch q
         h <- case v of
          p2@(CInt x) -> BB0 x
          p3          -> BB1 p3
         BB0 y = pure v
         BB1 y2 = pure y2
         pure h
*/
